#!/usr/bin/env python3

import os
import sys
import subprocess
import random
from time import sleep
from modules.pyshell_reborn import make_payload, make_connection

# Author: knassar702
# Maintainer: Arnav Padwal
# Version: 1

class PyShellReborn:
    END = '\033[0m'
    TAF = '\033[5;49m'
    
    def __init__(self):
        self.host = " "
        self.port = " "
        self.name = " "
        self.logo()
        
    def slowprint(self, s, speed=0.05):
        for c in s + '\n':
            sys.stdout.write(c)
            sys.stdout.flush()
            sleep(speed)

    def logo(self):
        logo = '''
    ____        _____ __         ____      ____       __                   
   / __ \__  __/ ___// /_  ___  / / /     / __ \___  / /_  ____  _________ 
  / /_/ / / / /\__ \/ __ \/ _ \/ / /_____/ /_/ / _ \/ __ \/ __ \/ ___/ __ \
 / ____/ /_/ /___/ / / / /  __/ / /_____/ _, _/  __/ /_/ / /_/ / /  / / / /
/_/    \__, //____/_/ /_/\___/_/_/     /_/ |_|\___/_.___/\____/_/  /_/ /_/ 
      /____/                                                               
'''
        print(logo)
        print(f"""
\t {self.TAF}[!] Beta [!] {self.END}
\t [*] Version : 1.0
\t [*] Author : knassar702
\t [*] Maintainer: Arnav Padwal\n
""")
    
    def help(self):
        self.slowprint("""
  Commands :
       set host       : Change Your Host (Ex: set host IP)
       set port       : Change Your Port (Ex: set port 4444)
       set name       : Change Your Name Session and Payload
       show options   : Show [Host,Port,Name,Target,BG]
       make           : Make Your Payload 
       run            : Start The Listener
""")

    def re(self):
        python = sys.executable
        os.execl(python, python, * sys.argv)

    def main(self):
        while True:
            ask = input('[ðŸ‘¾] Pyshell-Reborn :~ ').lower()
            if ask == "help":
                self.help()
            elif ask == 'banner':
                os.system("clear")
                self.logo()
            elif "exit" in ask:
                sleep(0.5)
                print("\nGood Bye :)\n")
                sys.exit()
            elif "set host" in ask:
                self.host = ask.split()[-1]
                print(f"Host => {self.host}")
            elif "set port" in ask:
                try:
                    self.port = int(ask.split()[-1])
                    print(f"Port => {self.port}")
                except ValueError:
                    print("[-] Error ..")
                    sleep(0.2)
            elif "set name" in ask:
                self.name = ask.split()[-1]
                print(f"Name => {self.name}")
            elif ask == "show options":
                info = (f"\n[+] Your Host : {self.host}\n[+] Your Port : {self.port}\n[+] Session Name : {self.name}\n")
                self.slowprint(info)
            elif ask == "make":
                if self.host != " " and self.port != " " and self.name != " ":
                    self.slowprint("[+] Building Payload [+]")
                    os.chdir('payloads')
                    make_payload(self.host, self.port, self.name)
                    os.chdir('..')
                    sleep(2)
                    self.slowprint("[+] Completed [+]\n[!] Saved in payloads File")
                else:
                    print(f"""
[!] Host   : {self.host}
[!] Port   : {self.port}
[!] Name   : {self.name}
""")
            elif ask in ['exploit', 'run', 'start']:
                if self.host != " " and self.port != " ":
                    try:
                        make_connection(self.host, self.port)
                    except OverflowError:
                        print('[!] Long Port ..')
                    except KeyboardInterrupt:
                        print("[!] Closing The Connection ")
                        sleep(1)
                    except socket.error:
                        print("[!] Connection is Closed ")
                        sleep(1)
                else:
                    print(f"\n[!] Host : {self.host}\n[!] Port : {self.port}\n")
            else:
                os.system(ask)

    def start(self):
        try:
            self.main()
        except EOFError:
            print("\n[!] Detect to exit . . .")
            sleep(1)
            print("\n[!] Good Bye\n")
            sys.exit()
        except KeyboardInterrupt:
            print("\n[!] Detect to exit . . .")
            sleep(1)
            print("\n[!] Good Bye\n")
            sys.exit()

if __name__ == "__main__":
    PyShellReborn().start()
